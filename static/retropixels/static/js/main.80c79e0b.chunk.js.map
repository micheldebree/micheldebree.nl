{"version":3,"sources":["ImageUpload.jsx","Canvas.jsx","Utilities.js","SourceImage.jsx","ImagePreProcessor.jsx","HiresCheckbox.jsx","ProfileSelection.jsx","TargetImage.jsx","Retropixels.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["ImageUpload","props","onload","useState","undefined","error","setError","onChange","acceptedFiles","forEach","f","file","reader","FileReader","onabort","onerror","Jimp","read","result","then","img","catch","err","message","readAsArrayBuffer","readFile","filesLimit","showPreviewsInDropzone","dropzoneText","Snackbar","open","autoHideDuration","onClose","Alert","severity","Canvas","canvasRef","React","useRef","width","height","imageData","useEffect","current","getContext","putImageData","ref","defaultProps","getImageDataFromJimpImage","jimpImage","data","dataSize","bitmap","length","slice","ImageData","Uint8ClampedArray","from","SourceImage","onChanged","image","setImage","setImageData","newImage","clone","cover","onUploaded","ImagePreProcessor","normalize","setNormalize","greyscale","setGreyScale","mirrorHor","setMirrorHor","mirrorVer","setMirrorVer","invert","setInvert","brightness","setBrightness","contrast","setContrast","blur","setBlur","mirror","Container","FormControlLabel","control","Checkbox","checked","name","label","Typography","gutterBottom","Slider","min","max","step","value","event","newValue","valueLabelDisplay","HiresCheckbox","setChecked","ProfileSelection","initialValue","items","setValue","FormControl","component","FormLabel","RadioGroup","aria-label","target","map","i","Radio","TargetImage","outputFormat","graphicMode","GraphicModes","all","hires","colorspaceId","paletteId","ditherId","ditherRadius","defaultQuantizer","Quantizer","Palettes","ColorSpaces","defaultConverter","Converter","defaultDitherer","OrderedDither","presets","pixelImage","setPixelImage","quantizer","setQuantizer","converter","setConverter","ditherer","setDitherer","newPixelImage","resizedImage","resize","mode","dither","opaque","convert","imageWidth","pixelWidth","y","x","paletteIndex","peek","pixelValue","colodore","get","xx","index","getImageDataFromPixelImage","Button","variant","disabled","color","onClick","binary","C64Writer","toBinary","buffer","toBuffer","blob","Blob","type","extension","saveAs","saveOutput","Retropixels","ditherDefault","paletteDefault","colorspace","setColorSpace","palette","setPalette","setHires","setDither","setDitherRadius","App","sourceImage","setSourceImage","processedImage","setProcessedImage","className","Grid","container","spacing","item","xs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80c79e0b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport Jimp from 'jimp/es';\nimport PropTypes from 'prop-types';\nimport { Card, Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\n\n// TODO: return Jimp Image\n// TODO: Only accept image types\n\n// Let's the user select an image file\n// When a valid image is selected, calls the \"onload\" callback with a JimpImage object.\nfunction ImageUpload(props) {\n  const { onload } = props;\n\n  const [error, setError] = useState(undefined);\n\n  function readFile(file) {\n    const reader = new FileReader();\n\n    reader.onabort = () => setError('file reading was aborted');\n    reader.onerror = () => setError('file reading has failed');\n    reader.onload = () => {\n      Jimp.read(reader.result)\n        .then(img => {\n          setError(undefined);\n          onload(img);\n        })\n        .catch(err => {\n          setError(err.message);\n        });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  function acceptFiles(acceptedFiles) {\n    acceptedFiles.forEach(f => readFile(f));\n  }\n\n  return (\n    <>\n      <DropzoneArea\n        onChange={acceptFiles}\n        acceptedFiles={['image/*']}\n        filesLimit={1}\n        showPreviewsInDropzone={false}\n        dropzoneText=\"Drag and drop an image here or click\"\n      />\n      <Snackbar open={error} autoHideDuration={6000} onClose={() => setError(undefined)}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Snackbar>\n    </>\n  );\n}\n\nImageUpload.propTypes = {\n  // callback when image is loaded successfully\n  onload: PropTypes.func.isRequired\n};\n\nexport default ImageUpload;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// https://blog.koenvangilst.nl/react-hooks-with-canvas/\n// https://www.w3schools.com/Tags/canvas_putimagedata.asp\n\nfunction Canvas(props) {\n  const canvasRef = React.useRef(null);\n  const getContext = () => canvasRef.current.getContext('2d');\n\n  const { width, height, imageData } = props;\n\n  // if imagedata property is set/changes, draw it on the canvas\n  useEffect(() => {\n    if (imageData !== undefined) {\n      getContext().putImageData(imageData, 0, 0);\n    }\n  }, [imageData]);\n\n  return <canvas ref={canvasRef} width={width} height={height} />;\n}\n\n// TODO: get width and height from imagedata\nCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  imageData: PropTypes.shape()\n};\n\nCanvas.defaultProps = {\n  imageData: undefined\n};\n\nexport default Canvas;\n","import { bitmap } from 'jimp';\nimport { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\n\nexport function convertJimpImageToPixelImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n  const palette = Palettes.all.colodore;\n  const colorspace = ColorSpaces.all.xyz;\n  const quantizer = new Quantizer(palette, colorspace);\n  const converter = new Converter(quantizer);\n\n  const graphicMode = GraphicModes.all.bitmap;\n  const result = graphicMode({});\n\n  converter.convert(jimpImage.bitmap, result);\n  return result;\n}\n\nexport function getImageDataFromJimpImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n\n  // TODO: Jimp does not seem to shrink the data array when resizing picture to a smaller size... Confirm?\n  const dataSize = jimpImage.bitmap.width * jimpImage.bitmap.height * 4;\n  let data;\n  if (jimpImage.bitmap.data.length > dataSize) {\n    data = jimpImage.bitmap.data.slice(0, dataSize);\n  } else {\n    data = jimpImage.bitmap.data;\n  }\n\n  return jimpImage !== undefined\n    ? new ImageData(Uint8ClampedArray.from(data), jimpImage.bitmap.width, jimpImage.bitmap.height)\n    : undefined;\n}\n\nexport function getImageDataFromPixelImage(pixelImage) {\n  if (pixelImage === undefined) {\n    return new ImageData(1, 1);\n  }\n  const imageWidth = pixelImage.mode.width * pixelImage.mode.pixelWidth;\n  // const imageWidth = pixelImage.mode.width;\n  const imageData = new ImageData(imageWidth, pixelImage.mode.height);\n  for (let y = 0; y < pixelImage.mode.height; y++) {\n    for (let x = 0; x < pixelImage.mode.width; x++) {\n      const paletteIndex = pixelImage.peek(x, y);\n      const pixelValue = paletteIndex !== undefined ? Palettes.all.colodore.get(paletteIndex) : [0, 0, 0, 0];\n      for (let xx = 0; xx < pixelImage.mode.pixelWidth; xx++) {\n        const index = y * 4 * imageWidth + x * pixelImage.mode.pixelWidth * 4 + xx * 4;\n        imageData.data[index] = pixelValue[0];\n        imageData.data[index + 1] = pixelValue[1];\n        imageData.data[index + 2] = pixelValue[2];\n        imageData.data[index + 3] = 0xff;\n      }\n      // Pixels.poke(imageData.data, x, y, pixelValue);\n    }\n  }\n  return imageData;\n}\n\nexport default {\n  getImageDataFromJimpImage\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardContent, CardMedia } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport Canvas from './Canvas';\nimport { getImageDataFromJimpImage } from './Utilities';\n\n// Let user upload image, scale it, and call callback with a jimpimage\nfunction SourceImage(props) {\n  const { onChanged } = props;\n\n  const [image, setImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n\n  function onUploaded(jimpImage) {\n    const newImage = jimpImage.clone();\n    newImage.cover(320, 200);\n    setImage(newImage);\n  }\n\n  useEffect(() => {\n    onChanged(image);\n    setImageData(getImageDataFromJimpImage(image));\n  }, [image, onChanged]);\n\n  return (\n    <>\n      <h2>input</h2>\n      <Canvas width={320} height={200} imageData={imageData} />\n      <ImageUpload onload={jimpImage => onUploaded(jimpImage)} />\n      {/* <ProfileSelection items={['crop', 'fill', 'fit']} onChange={() => {}} /> */}\n    </>\n  );\n}\n\nSourceImage.propTypes = {\n  onChanged: PropTypes.func.isRequired\n};\n\nexport default SourceImage;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Typography, FormControlLabel, Checkbox, Slider } from '@material-ui/core';\nimport { getImageDataFromJimpImage } from './Utilities';\nimport Canvas from './Canvas';\n\nfunction ImagePreProcessor(props) {\n  const { jimpImage, onChanged } = props;\n\n  const [image, setImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n  const [normalize, setNormalize] = useState(true);\n  const [greyscale, setGreyScale] = useState(false);\n  const [mirrorHor, setMirrorHor] = useState(false);\n  const [mirrorVer, setMirrorVer] = useState(false);\n  const [invert, setInvert] = useState(false);\n  const [brightness, setBrightness] = useState(0);\n  const [contrast, setContrast] = useState(0);\n  const [blur, setBlur] = useState(0);\n\n  useEffect(() => {\n    onChanged(image);\n    setImageData(getImageDataFromJimpImage(image));\n  }, [image, onChanged]);\n\n  useEffect(() => {\n    if (jimpImage === undefined) {\n      return;\n    }\n    const newImage = jimpImage.clone();\n\n    if (greyscale) {\n      newImage.greyscale();\n    }\n    if (normalize) {\n      newImage.normalize();\n    }\n\n    newImage.brightness(brightness);\n    newImage.contrast(contrast);\n\n    if (blur > 0) {\n      newImage.blur(blur);\n    }\n\n    newImage.mirror(mirrorHor, mirrorVer);\n\n    if (invert) {\n      newImage.invert();\n    }\n\n    setImage(newImage);\n  }, [jimpImage, normalize, brightness, contrast, greyscale, blur, mirrorHor, mirrorVer, invert]);\n\n  return (\n    <>\n      <h2>pre-processing</h2>\n      <Container>\n        <Canvas width={320} height={200} imageData={imageData} />\n      </Container>\n\n      <Container>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={normalize}\n              onChange={() => {\n                setNormalize(!normalize);\n              }}\n              name=\"normalizeCheckbox\"\n            />\n          }\n          label=\"Normalize\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={greyscale}\n              onChange={() => {\n                setGreyScale(!greyscale);\n              }}\n              name=\"greyscaleCheckbox\"\n            />\n          }\n          label=\"Greyscale\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={invert}\n              onChange={() => {\n                setInvert(!invert);\n              }}\n              name=\"invertCheckbox\"\n            />\n          }\n          label=\"Invert\"\n        />\n        <Container>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={mirrorHor}\n                onChange={() => {\n                  setMirrorHor(!mirrorHor);\n                }}\n                name=\"mirrorHorCheckbox\"\n              />\n            }\n            label=\"Flip Horizontal\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={mirrorVer}\n                onChange={() => {\n                  setMirrorVer(!mirrorVer);\n                }}\n                name=\"mirrorVerCheckbox\"\n              />\n            }\n            label=\"Flip Vertical\"\n          />\n        </Container>\n        <Typography gutterBottom>Brightness</Typography>\n        <Slider\n          min={-1.0}\n          max={1.0}\n          step={0.1}\n          value={brightness}\n          onChange={(event, newValue) => setBrightness(newValue)}\n          valueLabelDisplay=\"on\"\n        />\n        <Typography gutterBottom>Contrast</Typography>\n        <Slider\n          min={-1.0}\n          max={1.0}\n          step={0.1}\n          value={contrast}\n          onChange={(event, newValue) => setContrast(newValue)}\n          valueLabelDisplay=\"on\"\n        />\n        <Typography gutterBottom>Blur</Typography>\n        <Slider\n          min={0}\n          max={10}\n          value={blur}\n          onChange={(event, newValue) => setBlur(newValue)}\n          valueLabelDisplay=\"on\"\n        />\n      </Container>\n    </>\n  );\n}\n\nImagePreProcessor.propTypes = {\n  jimpImage: PropTypes.shape(),\n  onChanged: PropTypes.func.isRequired\n};\n\nImagePreProcessor.defaultProps = {\n  jimpImage: undefined\n};\n\nexport default ImagePreProcessor;\n","import React, { useEffect, useState } from 'react';\nimport { FormControlLabel, Checkbox } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nfunction HiresCheckbox(props) {\n  const { onChange } = props;\n\n  const [checked, setChecked] = useState(false);\n\n  function handleOnChange() {\n    setChecked(!checked);\n  }\n\n  useEffect(() => {\n    onChange(checked);\n  }, [checked]);\n\n  return (\n    <FormControlLabel\n      control={<Checkbox checked={checked} onChange={handleOnChange} name=\"hiresCheckbox\" />}\n      label=\"Hires\"\n    />\n  );\n}\n\nHiresCheckbox.propTypes = {\n  onChange: PropTypes.func.isRequired\n};\n\nexport default HiresCheckbox;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nfunction ProfileSelection(props) {\n  const { label, initialValue, items, onChange } = props;\n\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  useEffect(() => {\n    onChange(value);\n  }, [value, onChange]);\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <RadioGroup aria-label={label} name={`select${label}`} value={value} onChange={handleChange}>\n        {items.map(i => (\n          <FormControlLabel value={i} control={<Radio />} label={i} />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nProfileSelection.propTypes = {\n  label: PropTypes.string,\n  initialValue: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nProfileSelection.defaultProps = {\n  label: 'Choose'\n};\n\nexport default ProfileSelection;\n","import React, { useEffect, useState } from 'react';\nimport { C64Writer, ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\nimport { Button } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport OrderedDither from 'retropixels-core/target/conversion/OrderedDither';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport { saveAs } from 'file-saver';\nimport { getImageDataFromPixelImage } from './Utilities';\nimport Canvas from './Canvas';\n\nfunction TargetImage(props) {\n  const graphicMode = GraphicModes.all.bitmap;\n\n  const { jimpImage, hires, colorspaceId, paletteId, ditherId, ditherRadius } = props;\n\n  const defaultQuantizer = new Quantizer(Palettes.all[paletteId], ColorSpaces.all[colorspaceId]);\n  const defaultConverter = new Converter(defaultQuantizer);\n  const defaultDitherer = new OrderedDither(OrderedDither.presets[ditherId], ditherRadius);\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n\n  const [quantizer, setQuantizer] = useState(defaultQuantizer);\n  const [converter, setConverter] = useState(defaultConverter);\n  const [ditherer, setDitherer] = useState(defaultDitherer);\n\n  useEffect(() => {\n    setQuantizer(new Quantizer(Palettes.all[paletteId], ColorSpaces.all[colorspaceId]));\n  }, [colorspaceId, paletteId]);\n\n  useEffect(() => {\n    setConverter(new Converter(quantizer));\n  }, [quantizer]);\n\n  useEffect(() => {\n    setPixelImage(graphicMode({ hires }));\n  }, [hires, graphicMode]);\n\n  useEffect(() => {\n    setDitherer(new OrderedDither(OrderedDither.presets[ditherId], ditherRadius));\n  }, [ditherId, ditherRadius]);\n\n  useEffect(() => {\n    if (jimpImage !== undefined) {\n      const newPixelImage = graphicMode({ hires });\n      const resizedImage = jimpImage.clone();\n      resizedImage.resize(newPixelImage.mode.width, newPixelImage.mode.height);\n      if (ditherId !== 'none') {\n        ditherer.dither(resizedImage.bitmap);\n      }\n      // TODO: this is a workaround for a bug in dithering\n      // that clears the alpha channel\n      resizedImage.opaque();\n\n      converter.convert(resizedImage.bitmap, newPixelImage);\n      setPixelImage(newPixelImage);\n    }\n  }, [jimpImage, converter, ditherer, hires, graphicMode]);\n\n  useEffect(() => {\n    setImageData(getImageDataFromPixelImage(pixelImage));\n  }, [pixelImage]);\n\n  function saveOutput() {\n    const binary = C64Writer.toBinary(pixelImage);\n    const buffer = C64Writer.toBuffer(binary);\n    const blob = new Blob([buffer], { type: 'application/octet-stream' });\n    const extension = pixelImage.mode.pixelWidth < 2 ? '.art' : '.kla';\n    saveAs(blob, `test${extension}`);\n  }\n\n  let outputFormat;\n  if (pixelImage !== undefined) {\n    outputFormat = pixelImage.mode.pixelWidth < 2 ? 'Art studio' : 'Koala';\n  }\n\n  return (\n    <>\n      <Canvas width={320} height={200} imageData={imageData} />\n      <Button variant=\"contained\" disabled={pixelImage === undefined} color=\"primary\" onClick={() => saveOutput()}>\n        <CloudDownloadIcon /> &nbsp; Download {outputFormat}\n      </Button>\n    </>\n  );\n}\n\nTargetImage.propTypes = {\n  jimpImage: PropTypes.shape(),\n  hires: PropTypes.bool,\n  colorspaceId: PropTypes.string,\n  paletteId: PropTypes.string,\n  ditherId: PropTypes.string,\n  ditherRadius: PropTypes.number\n};\n\nTargetImage.defaultProps = {\n  jimpImage: undefined,\n  hires: false,\n  colorspaceId: 'xyz',\n  paletteId: 'colodore',\n  ditherId: 'bayer4x4',\n  ditherRadius: 32\n};\n\nexport default TargetImage;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Slider, Typography } from '@material-ui/core';\nimport HiresCheckbox from './HiresCheckbox';\nimport ProfileSelection from './ProfileSelection';\nimport TargetImage from './TargetImage';\n\n// wraps the Targetimage with controls for the various properties\nfunction Retropixels(props) {\n  const ditherOptions = ['none', 'bayer2x2', 'bayer4x4', 'bayer8x8'];\n  const ditherDefault = 'bayer4x4';\n  const colorspaceOptions = ['rgb', 'yuv', 'xyz', 'rainbow'];\n  const colorspaceDefault = 'xyz';\n  const paletteOptions = ['colodore', 'pepto', 'deekay'];\n  const paletteDefault = 'colodore';\n\n  const { jimpImage } = props;\n\n  const [colorspace, setColorSpace] = useState(colorspaceDefault);\n  const [palette, setPalette] = useState(paletteDefault);\n  const [hires, setHires] = useState(false);\n  const [dither, setDither] = useState(ditherDefault);\n  const [ditherRadius, setDitherRadius] = useState(32);\n\n  return (\n    <>\n      <h2>output</h2>\n      <Container>\n        <TargetImage\n          jimpImage={jimpImage}\n          hires={hires}\n          colorspaceId={colorspace}\n          paletteId={palette}\n          ditherId={dither}\n          ditherRadius={ditherRadius}\n        />\n      </Container>\n      <Container>\n        <HiresCheckbox onChange={value => setHires(value)} />\n      </Container>\n      <Container>\n        <ProfileSelection\n          label=\"colorspace\"\n          initialValue={colorspaceDefault}\n          items={colorspaceOptions}\n          onChange={value => setColorSpace(value)}\n        />\n        <ProfileSelection\n          label=\"palette\"\n          initialValue={paletteDefault}\n          items={paletteOptions}\n          onChange={value => setPalette(value)}\n        />\n        <ProfileSelection\n          label=\"dithering\"\n          initialValue={ditherDefault}\n          items={ditherOptions}\n          onChange={value => setDither(value)}\n        />\n        <Typography gutterBottom>Dither strength</Typography>\n        <Slider\n          disabled={dither === 'none'}\n          min={0}\n          max={64}\n          value={ditherRadius}\n          onChange={(event, newValue) => setDitherRadius(newValue)}\n          valueLabelDisplay=\"on\"\n        />\n      </Container>\n    </>\n  );\n}\n\nRetropixels.propTypes = {\n  jimpImage: PropTypes.shape()\n};\n\nRetropixels.defaultProps = {\n  jimpImage: undefined\n};\n\nexport default Retropixels;\n","import React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport './App.css';\nimport SourceImage from './SourceImage';\nimport ImagePreProcessor from './ImagePreProcessor';\nimport Retropixels from './Retropixels';\n\n// https://github.com/harishmahamure/photoCompress\n\nfunction App() {\n  const [sourceImage, setSourceImage] = useState(undefined);\n  const [processedImage, setProcessedImage] = useState(undefined);\n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">Retropixels</header> */}\n      <body className=\"App-body\">\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <SourceImage onChanged={jimpImage => setSourceImage(jimpImage)} />\n          </Grid>\n          <Grid item xs>\n            <ImagePreProcessor jimpImage={sourceImage} onChanged={jimpImage => setProcessedImage(jimpImage)} />\n          </Grid>\n          <Grid item xs>\n            <Retropixels jimpImage={processedImage} />\n          </Grid>\n        </Grid>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}