{"version":3,"sources":["ImageUpload.jsx","Canvas.jsx","Utilities.js","SourceImage.jsx","ProfileSelection.jsx","ImagePreProcessor.jsx","HiresCheckbox.jsx","TargetImage.jsx","Retropixels.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["ImageUpload","props","onload","useState","undefined","error","setError","onChange","acceptedFiles","forEach","f","file","reader","FileReader","onabort","onerror","Jimp","read","result","then","img","catch","err","message","readAsArrayBuffer","readFile","filesLimit","showPreviewsInDropzone","dropzoneText","Snackbar","open","autoHideDuration","onClose","Alert","severity","Canvas","canvasRef","React","useRef","width","height","imageData","useEffect","current","getContext","putImageData","ref","defaultProps","getImageDataFromJimpImage","jimpImage","data","dataSize","bitmap","length","slice","ImageData","Uint8ClampedArray","from","SourceImage","onChanged","image","setImage","setImageData","CardMedia","CardContent","newImage","clone","cover","onUploaded","ProfileSelection","label","initialValue","items","value","setValue","FormControl","component","FormLabel","RadioGroup","aria-label","name","event","target","map","i","FormControlLabel","control","Radio","ImagePreProcessor","normalize","setNormalize","brightness","setBrightness","color","apply","params","Checkbox","checked","Typography","gutterBottom","Slider","min","max","newValue","valueLabelDisplay","HiresCheckbox","setChecked","TargetImage","outputFormat","graphicMode","GraphicModes","all","hires","colorspaceId","paletteId","ditherId","ditherRadius","defaultQuantizer","Quantizer","Palettes","ColorSpaces","defaultConverter","Converter","defaultDitherer","OrderedDither","presets","pixelImage","setPixelImage","quantizer","setQuantizer","converter","setConverter","ditherer","setDitherer","newPixelImage","resizedImage","resize","mode","dither","opaque","convert","imageWidth","pixelWidth","y","x","paletteIndex","peek","pixelValue","colodore","get","xx","index","getImageDataFromPixelImage","Button","variant","disabled","onClick","binary","C64Writer","toBinary","buffer","toBuffer","blob","Blob","type","extension","saveAs","saveOutput","Retropixels","ditherDefault","paletteDefault","colorspace","setColorSpace","palette","setPalette","setHires","setDither","setDitherRadius","App","sourceImage","setSourceImage","processedImage","setProcessedImage","className","Grid","container","spacing","item","Card","xs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.daf7d23a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport Jimp from 'jimp/es';\nimport PropTypes from 'prop-types';\nimport { Card, Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\n\n// TODO: return Jimp Image\n// TODO: Only accept image types\n\n// Let's the user select an image file\n// When a valid image is selected, calls the \"onload\" callback with a JimpImage object.\nfunction ImageUpload(props) {\n  const { onload } = props;\n\n  const [error, setError] = useState(undefined);\n\n  function readFile(file) {\n    const reader = new FileReader();\n\n    reader.onabort = () => setError('file reading was aborted');\n    reader.onerror = () => setError('file reading has failed');\n    reader.onload = () => {\n      Jimp.read(reader.result)\n        .then(img => {\n          setError(undefined);\n          onload(img);\n        })\n        .catch(err => {\n          setError(err.message);\n        });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  function acceptFiles(acceptedFiles) {\n    acceptedFiles.forEach(f => readFile(f));\n  }\n\n  return (\n    <>\n      <DropzoneArea\n        onChange={acceptFiles}\n        acceptedFiles={['image/*']}\n        filesLimit={1}\n        showPreviewsInDropzone={false}\n        dropzoneText=\"Drag and drop an image here or click\"\n      />\n      <Snackbar open={error} autoHideDuration={6000} onClose={() => setError(undefined)}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Snackbar>\n    </>\n  );\n}\n\nImageUpload.propTypes = {\n  // callback when image is loaded successfully\n  onload: PropTypes.func.isRequired\n};\n\nexport default ImageUpload;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// https://blog.koenvangilst.nl/react-hooks-with-canvas/\n// https://www.w3schools.com/Tags/canvas_putimagedata.asp\n\nfunction Canvas(props) {\n  const canvasRef = React.useRef(null);\n  const getContext = () => canvasRef.current.getContext('2d');\n\n  const { width, height, imageData } = props;\n\n  // if imagedata property is set/changes, draw it on the canvas\n  useEffect(() => {\n    if (imageData !== undefined) {\n      getContext().putImageData(imageData, 0, 0);\n    }\n  }, [imageData]);\n\n  return <canvas ref={canvasRef} width={width} height={height} />;\n}\n\n// TODO: get width and height from imagedata\nCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  imageData: PropTypes.shape()\n};\n\nCanvas.defaultProps = {\n  imageData: undefined\n};\n\nexport default Canvas;\n","import { bitmap } from 'jimp';\nimport { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\n\nexport function convertJimpImageToPixelImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n  const palette = Palettes.all.colodore;\n  const colorspace = ColorSpaces.all.xyz;\n  const quantizer = new Quantizer(palette, colorspace);\n  const converter = new Converter(quantizer);\n\n  const graphicMode = GraphicModes.all.bitmap;\n  const result = graphicMode({});\n\n  converter.convert(jimpImage.bitmap, result);\n  return result;\n}\n\nexport function getImageDataFromJimpImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n\n  // TODO: Jimp does not seem to shrink the data array when resizing picture to a smaller size... Confirm?\n  const dataSize = jimpImage.bitmap.width * jimpImage.bitmap.height * 4;\n  let data;\n  if (jimpImage.bitmap.data.length > dataSize) {\n    data = jimpImage.bitmap.data.slice(0, dataSize);\n  } else {\n    data = jimpImage.bitmap.data;\n  }\n\n  return jimpImage !== undefined\n    ? new ImageData(Uint8ClampedArray.from(data), jimpImage.bitmap.width, jimpImage.bitmap.height)\n    : undefined;\n}\n\nexport function getImageDataFromPixelImage(pixelImage) {\n  if (pixelImage === undefined) {\n    return new ImageData(1, 1);\n  }\n  const imageWidth = pixelImage.mode.width * pixelImage.mode.pixelWidth;\n  // const imageWidth = pixelImage.mode.width;\n  const imageData = new ImageData(imageWidth, pixelImage.mode.height);\n  for (let y = 0; y < pixelImage.mode.height; y++) {\n    for (let x = 0; x < pixelImage.mode.width; x++) {\n      const paletteIndex = pixelImage.peek(x, y);\n      const pixelValue = paletteIndex !== undefined ? Palettes.all.colodore.get(paletteIndex) : [0, 0, 0, 0];\n      for (let xx = 0; xx < pixelImage.mode.pixelWidth; xx++) {\n        const index = y * 4 * imageWidth + x * pixelImage.mode.pixelWidth * 4 + xx * 4;\n        imageData.data[index] = pixelValue[0];\n        imageData.data[index + 1] = pixelValue[1];\n        imageData.data[index + 2] = pixelValue[2];\n        imageData.data[index + 3] = 0xff;\n      }\n      // Pixels.poke(imageData.data, x, y, pixelValue);\n    }\n  }\n  return imageData;\n}\n\nexport default {\n  getImageDataFromJimpImage\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardContent, CardMedia } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport Canvas from './Canvas';\nimport { getImageDataFromJimpImage } from './Utilities';\n\n// Let user upload image, scale it, and call callback with a jimpimage\nfunction SourceImage(props) {\n  const { onChanged } = props;\n\n  const [image, setImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n\n  function onUploaded(jimpImage) {\n    const newImage = jimpImage.clone();\n    newImage.cover(320, 200);\n    setImage(newImage);\n  }\n\n  useEffect(() => {\n    onChanged(image);\n    setImageData(getImageDataFromJimpImage(image));\n  }, [image, onChanged]);\n\n  return (\n    <>\n      <h2>input</h2>\n      <CardMedia>\n        <Canvas width={320} height={200} imageData={imageData} />\n      </CardMedia>\n      <CardContent>\n        <ImageUpload onload={jimpImage => onUploaded(jimpImage)} />\n      </CardContent>\n      {/* <ProfileSelection items={['crop', 'fill', 'fit']} onChange={() => {}} /> */}\n    </>\n  );\n}\n\nSourceImage.propTypes = {\n  onChanged: PropTypes.func.isRequired\n};\n\nexport default SourceImage;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nfunction ProfileSelection(props) {\n  const { label, initialValue, items, onChange } = props;\n\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  useEffect(() => {\n    onChange(value);\n  }, [value, onChange]);\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <RadioGroup aria-label={label} name={`select${label}`} value={value} onChange={handleChange}>\n        {items.map(i => (\n          <FormControlLabel value={i} control={<Radio />} label={i} />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nProfileSelection.propTypes = {\n  label: PropTypes.string,\n  initialValue: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nProfileSelection.defaultProps = {\n  label: 'Choose'\n};\n\nexport default ProfileSelection;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography, CardContent, CardMedia, FormControlLabel, Checkbox, Slider } from '@material-ui/core';\nimport ProfileSelection from './ProfileSelection';\nimport { getImageDataFromJimpImage } from './Utilities';\nimport Canvas from './Canvas';\n\nfunction ImagePreProcessor(props) {\n  const { jimpImage, onChanged } = props;\n\n  const [image, setImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n  const [normalize, setNormalize] = useState(true);\n  const [brightness, setBrightness] = useState(0);\n\n  useEffect(() => {\n    onChanged(image);\n    setImageData(getImageDataFromJimpImage(image));\n  }, [image, onChanged]);\n\n  useEffect(() => {\n    if (jimpImage === undefined) {\n      return;\n    }\n    const newImage = jimpImage.clone();\n    // ditherer.dither(newImage.bitmap);\n    // TODO: this is a workaround for a bug in dithering\n    // that clears the alpha channel\n    // newImage.opaque();\n\n    if (normalize) {\n      newImage.normalize();\n    }\n\n    newImage.color([{ apply: 'brighten', params: [brightness] }]);\n\n    setImage(newImage);\n  }, [jimpImage, normalize, brightness]);\n\n  return (\n    <>\n      <h2>pre-processing</h2>\n      <CardMedia>\n        <Canvas width={320} height={200} imageData={imageData} />\n      </CardMedia>\n      <CardContent>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={normalize}\n              onChange={() => {\n                setNormalize(!normalize);\n              }}\n              name=\"normalizeCheckbox\"\n            />\n          }\n          label=\"Normalize\"\n        />\n        <Typography gutterBottom>Brighten</Typography>\n        <Slider\n          min={0}\n          max={100}\n          value={brightness}\n          onChange={(event, newValue) => setBrightness(newValue)}\n          valueLabelDisplay=\"on\"\n        />\n      </CardContent>\n    </>\n  );\n}\n\nImagePreProcessor.propTypes = {\n  jimpImage: PropTypes.shape(),\n  onChanged: PropTypes.func.isRequired\n};\n\nImagePreProcessor.defaultProps = {\n  jimpImage: undefined\n};\n\nexport default ImagePreProcessor;\n","import React, { useEffect, useState } from 'react';\nimport { FormControlLabel, Checkbox } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nfunction HiresCheckbox(props) {\n  const { onChange } = props;\n\n  const [checked, setChecked] = useState(false);\n\n  function handleOnChange() {\n    setChecked(!checked);\n  }\n\n  useEffect(() => {\n    onChange(checked);\n  }, [checked]);\n\n  return (\n    <FormControlLabel\n      control={<Checkbox checked={checked} onChange={handleOnChange} name=\"hiresCheckbox\" />}\n      label=\"Hires\"\n    />\n  );\n}\n\nHiresCheckbox.propTypes = {\n  onChange: PropTypes.func.isRequired\n};\n\nexport default HiresCheckbox;\n","import React, { useEffect, useState } from 'react';\nimport { C64Writer, ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\nimport { Button } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport OrderedDither from 'retropixels-core/target/conversion/OrderedDither';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport { saveAs } from 'file-saver';\nimport { getImageDataFromPixelImage } from './Utilities';\nimport Canvas from './Canvas';\n\nfunction TargetImage(props) {\n  const graphicMode = GraphicModes.all.bitmap;\n\n  const { jimpImage, hires, colorspaceId, paletteId, ditherId, ditherRadius } = props;\n\n  const defaultQuantizer = new Quantizer(Palettes.all[paletteId], ColorSpaces.all[colorspaceId]);\n  const defaultConverter = new Converter(defaultQuantizer);\n  const defaultDitherer = new OrderedDither(OrderedDither.presets[ditherId], ditherRadius);\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n\n  const [quantizer, setQuantizer] = useState(defaultQuantizer);\n  const [converter, setConverter] = useState(defaultConverter);\n  const [ditherer, setDitherer] = useState(defaultDitherer);\n\n  useEffect(() => {\n    setQuantizer(new Quantizer(Palettes.all[paletteId], ColorSpaces.all[colorspaceId]));\n  }, [colorspaceId, paletteId]);\n\n  useEffect(() => {\n    setConverter(new Converter(quantizer));\n  }, [quantizer]);\n\n  useEffect(() => {\n    setPixelImage(graphicMode({ hires }));\n  }, [hires, graphicMode]);\n\n  useEffect(() => {\n    setDitherer(new OrderedDither(OrderedDither.presets[ditherId], ditherRadius));\n  }, [ditherId, ditherRadius]);\n\n  useEffect(() => {\n    if (jimpImage !== undefined) {\n      const newPixelImage = graphicMode({ hires });\n      const resizedImage = jimpImage.clone();\n      resizedImage.resize(newPixelImage.mode.width, newPixelImage.mode.height);\n      if (ditherId !== 'none') {\n        ditherer.dither(resizedImage.bitmap);\n      }\n      // TODO: this is a workaround for a bug in dithering\n      // that clears the alpha channel\n      resizedImage.opaque();\n\n      converter.convert(resizedImage.bitmap, newPixelImage);\n      setPixelImage(newPixelImage);\n    }\n  }, [jimpImage, converter, ditherer, hires, graphicMode]);\n\n  useEffect(() => {\n    setImageData(getImageDataFromPixelImage(pixelImage));\n  }, [pixelImage]);\n\n  function saveOutput() {\n    const binary = C64Writer.toBinary(pixelImage);\n    const buffer = C64Writer.toBuffer(binary);\n    const blob = new Blob([buffer], { type: 'application/octet-stream' });\n    const extension = pixelImage.mode.pixelWidth < 2 ? '.art' : '.kla';\n    saveAs(blob, `test${extension}`);\n  }\n\n  let outputFormat;\n  let outputExtension;\n  if (pixelImage !== undefined) {\n    outputFormat = pixelImage.mode.pixelWidth < 2 ? 'Art studio' : 'Koala';\n  }\n\n  return (\n    <>\n      <Canvas width={320} height={200} imageData={imageData} />;\n      <Button variant=\"contained\" disabled={pixelImage === undefined} color=\"primary\" onClick={() => saveOutput()}>\n        <CloudDownloadIcon /> &nbsp; Download {outputFormat}\n      </Button>\n    </>\n  );\n}\n\nTargetImage.propTypes = {\n  jimpImage: PropTypes.shape(),\n  hires: PropTypes.bool,\n  colorspaceId: PropTypes.string,\n  paletteId: PropTypes.string,\n  ditherId: PropTypes.string,\n  ditherRadius: PropTypes.number\n};\n\nTargetImage.defaultProps = {\n  jimpImage: undefined,\n  hires: false,\n  colorspaceId: 'xyz',\n  paletteId: 'colodore',\n  ditherId: 'bayer4x4',\n  ditherRadius: 32\n};\n\nexport default TargetImage;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, CardContent, CardMedia, CardActions, Slider, Typography } from '@material-ui/core';\nimport HiresCheckbox from './HiresCheckbox';\nimport ProfileSelection from './ProfileSelection';\nimport TargetImage from './TargetImage';\n\n// wraps the Targetimage with controls for the various properties\nfunction Retropixels(props) {\n  const ditherOptions = ['none', 'bayer2x2', 'bayer4x4', 'bayer8x8'];\n  const ditherDefault = 'bayer4x4';\n  const colorspaceOptions = ['rgb', 'yuv', 'xyz', 'rainbow'];\n  const colorspaceDefault = 'xyz';\n  const paletteOptions = ['colodore', 'pepto', 'deekay'];\n  const paletteDefault = 'colodore';\n\n  const { jimpImage } = props;\n\n  const [colorspace, setColorSpace] = useState(colorspaceDefault);\n  const [palette, setPalette] = useState(paletteDefault);\n  const [hires, setHires] = useState(false);\n  const [dither, setDither] = useState(ditherDefault);\n  const [ditherRadius, setDitherRadius] = useState(32);\n\n  return (\n    <>\n      <h2>output</h2>\n      <CardMedia>\n        <TargetImage\n          jimpImage={jimpImage}\n          hires={hires}\n          colorspaceId={colorspace}\n          paletteId={palette}\n          ditherId={dither}\n          ditherRadius={ditherRadius}\n        />\n      </CardMedia>\n      <CardContent>\n        <HiresCheckbox onChange={value => setHires(value)} />\n        <ProfileSelection\n          label=\"colorspace\"\n          initialValue={colorspaceDefault}\n          items={colorspaceOptions}\n          onChange={value => setColorSpace(value)}\n        />\n        <ProfileSelection\n          label=\"palette\"\n          initialValue={paletteDefault}\n          items={paletteOptions}\n          onChange={value => setPalette(value)}\n        />\n        <ProfileSelection\n          label=\"dithering\"\n          initialValue={ditherDefault}\n          items={ditherOptions}\n          onChange={value => setDither(value)}\n        />\n        <Typography gutterBottom>Dither strength</Typography>\n        <Slider\n          disabled={dither === 'none'}\n          min={0}\n          max={64}\n          value={ditherRadius}\n          onChange={(event, newValue) => setDitherRadius(newValue)}\n          valueLabelDisplay=\"on\"\n        />\n      </CardContent>\n    </>\n  );\n}\n\nRetropixels.propTypes = {\n  jimpImage: PropTypes.shape()\n};\n\nRetropixels.defaultProps = {\n  jimpImage: undefined\n};\n\nexport default Retropixels;\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Card } from '@material-ui/core';\nimport './App.css';\nimport SourceImage from './SourceImage';\nimport ImagePreProcessor from './ImagePreProcessor';\nimport Retropixels from './Retropixels';\n\n// https://github.com/harishmahamure/photoCompress\n\nfunction App() {\n  const [sourceImage, setSourceImage] = useState(undefined);\n  const [processedImage, setProcessedImage] = useState(undefined);\n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">Retropixels</header> */}\n      <body className=\"App-body\">\n        <Grid container spacing={3}>\n          <Grid item component={Card} xs>\n            <SourceImage onChanged={jimpImage => setSourceImage(jimpImage)} />\n          </Grid>\n          <Grid item component={Card} xs>\n            <ImagePreProcessor jimpImage={sourceImage} onChanged={jimpImage => setProcessedImage(jimpImage)} />\n          </Grid>\n          <Grid item component={Card} xs>\n            <Retropixels jimpImage={processedImage} />\n          </Grid>\n        </Grid>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}