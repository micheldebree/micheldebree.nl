{"version":3,"sources":["Canvas.jsx","ImageUpload.jsx","Utilities.js","ProfileSelection.jsx","SourceImage.jsx","ImagePreProcessor.jsx","TargetImage.jsx","Retropixels.jsx","logo.svg","version.js","App.jsx","reportWebVitals.js","index.jsx"],"names":["Canvas","props","canvasRef","React","useRef","width","height","imageData","useEffect","undefined","current","getContext","putImageData","Box","m","ref","defaultProps","ImageUpload","onload","useState","error","setError","useDropzone","accept","maxFiles","acceptedFiles","fileRejections","getRootProps","getInputProps","length","file","reader","FileReader","onabort","onerror","Jimp","read","result","then","img","jimpImage","filename","name","catch","err","message","readAsArrayBuffer","readFile","rejectedFile","errorMessages","errors","map","e","reduce","a","path","Container","border","boxShadow","borderRadius","borderColor","className","Snackbar","open","autoHideDuration","onClose","Alert","severity","getImageDataFromJimpImage","data","dataSize","bitmap","slice","ImageData","Uint8ClampedArray","from","parseFilename","periodPos","lastIndexOf","extension","substring","basename","Math","min","abbreviateFilename","maxSize","parsed","ProfileSelection","label","value","items","onChange","FormControl","component","FormLabel","RadioGroup","row","aria-label","event","target","i","FormControlLabel","control","Radio","SourceImage","onChanged","uploadedImage","setUploadedImage","image","setImage","setImageData","scale","setScale","setFilename","newImage","clone","cover","contain","blitImage","crop","scan","x","y","idx","clearJimpImage","blit","cropJimpImage","newUploadedImage","align","ImagePreProcessor","normalizeDefault","greyscaleDefault","mirrorHorDefault","mirrorVerDefault","invertDefault","normalize","setNormalize","greyscale","setGreyscale","mirrorHor","setMirrorHor","mirrorVer","setMirrorVer","invert","setInvert","brightness","setBrightness","contrast","setContrast","blur","setBlur","threshold","setThreshold","mirror","max","autoGreyscale","defaultsSet","Button","variant","disabled","onClick","Checkbox","checked","Grid","container","item","xs","Slider","step","newValue","valueLabelDisplay","TargetImage","graphicMode","GraphicModes","all","hires","colorspaceId","paletteId","ditherId","ditherRadius","defaultQuantizer","Quantizer","Palettes","ColorSpaces","defaultConverter","Converter","defaultDitherer","OrderedDither","presets","pixelImage","setPixelImage","quantizer","setQuantizer","converter","setConverter","ditherer","setDitherer","newPixelImage","resizedImage","resize","mode","dither","opaque","convert","imageWidth","pixelWidth","paletteIndex","peek","pixelValue","colodore","get","xx","index","getImageDataFromPixelImage","Retropixels","ditherDefault","paletteDefault","colorspaceDefault","hiresDefault","colorspace","setColorSpace","palette","setPalette","setHires","setDither","setDitherRadius","targetFilename","parsedFilename","outputFormat","color","binary","C64Writer","toBinary","buffer","toBuffer","blob","Blob","type","saveAs","saveOutput","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","App","sourceImage","setSourceImage","processedImage","setProcessedImage","classes","AppBar","position","Toolbar","src","Logo","alt","Typography","Link","href","AppVersion","newSourceImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2281ef4.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\n\n// https://blog.koenvangilst.nl/react-hooks-with-canvas/\n// https://www.w3schools.com/Tags/canvas_putimagedata.asp\n\nfunction Canvas(props) {\n  const canvasRef = React.useRef(null);\n  const getContext = () => canvasRef.current.getContext('2d');\n\n  const { width, height, imageData } = props;\n\n  // if imagedata property is set/changes, draw it on the canvas\n  useEffect(() => {\n    if (imageData !== undefined) {\n      getContext().putImageData(imageData, 0, 0);\n    }\n  }, [imageData]);\n\n  return (\n    <Box m={1}>\n      <canvas ref={canvasRef} width={width} height={height} />\n    </Box>\n  );\n}\n\n// TODO: get width and height from imagedata\nCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  imageData: PropTypes.shape()\n};\n\nCanvas.defaultProps = {\n  imageData: undefined\n};\n\nexport default Canvas;\n","import React, { useState, useEffect } from 'react';\nimport Jimp from 'jimp/es';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\nimport { Container, Box, Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport Canvas from './Canvas';\n\n// TODO: return Jimp Image\n// TODO: Only accept image types\n\n// Let's the user select an image file\n// When a valid image is selected, calls the \"onload\" callback with a JimpImage object.\nfunction ImageUpload(props) {\n  const { onload, imageData } = props;\n\n  const [error, setError] = useState(undefined);\n  const { acceptedFiles, fileRejections, getRootProps, getInputProps } = useDropzone({\n    accept: 'image/*',\n    maxFiles: 1\n  });\n\n  useEffect(() => {\n    const readFile = file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => setError('file reading was aborted');\n      reader.onerror = () => setError('file reading has failed');\n      reader.onload = () => {\n        Jimp.read(reader.result)\n          .then(img => {\n            setError(undefined);\n            onload({ jimpImage: img, filename: file.name });\n          })\n          .catch(err => {\n            setError(err.message);\n          });\n      };\n      reader.readAsArrayBuffer(file);\n    };\n    if (acceptedFiles !== undefined && acceptedFiles.length === 1) {\n      readFile(acceptedFiles[0]);\n    }\n  }, [acceptedFiles]);\n\n  useEffect(() => {\n    if (fileRejections !== undefined && fileRejections.length > 0) {\n      const rejectedFile = fileRejections[0];\n      const errorMessages = rejectedFile.errors.map(e => e.message).reduce((a, e) => `${a},${e}`);\n      setError(`Cannot load ${rejectedFile.file.path}: ${errorMessages}`);\n    }\n  }, [fileRejections]);\n\n  return (\n    <Container>\n      <Box border={1} m={1} boxShadow={2} borderRadius=\"borderRadius\" borderColor=\"grey.500\">\n        <div {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <Canvas width={320} height={200} imageData={imageData} />\n          <p>Drop image here, or click to select image</p>\n        </div>\n      </Box>\n      <Snackbar open={error} autoHideDuration={6000} onClose={() => setError(undefined)}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Snackbar>\n    </Container>\n  );\n}\n\nImageUpload.propTypes = {\n  // callback when image is loaded successfully\n  onload: PropTypes.func.isRequired,\n  imageData: PropTypes.shape()\n};\n\nImageUpload.defaultProps = {\n  imageData: undefined\n};\nexport default ImageUpload;\n","import { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\n\nexport function convertJimpImageToPixelImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n  const palette = Palettes.all.colodore;\n  const colorspace = ColorSpaces.all.xyz;\n  const quantizer = new Quantizer(palette, colorspace);\n  const converter = new Converter(quantizer);\n\n  const graphicMode = GraphicModes.all.bitmap;\n  const result = graphicMode({});\n\n  converter.convert(jimpImage.bitmap, result);\n  return result;\n}\n\nexport function getImageDataFromJimpImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n\n  // TODO: Jimp does not seem to shrink the data array when resizing picture to a smaller size... Confirm?\n  const dataSize = jimpImage.bitmap.width * jimpImage.bitmap.height * 4;\n  let data;\n  if (jimpImage.bitmap.data.length > dataSize) {\n    data = jimpImage.bitmap.data.slice(0, dataSize);\n  } else {\n    data = jimpImage.bitmap.data;\n  }\n\n  return jimpImage !== undefined\n    ? new ImageData(Uint8ClampedArray.from(data), jimpImage.bitmap.width, jimpImage.bitmap.height)\n    : undefined;\n}\n\nexport function clearJimpImage(jimpImage) {\n  jimpImage.scan(0, 0, jimpImage.bitmap.width, jimpImage.bitmap.height, (x, y, idx) => {\n    // this is the image\n\n    jimpImage.bitmap.data[idx + 0] = 0;\n    jimpImage.bitmap.data[idx + 1] = 0;\n    jimpImage.bitmap.data[idx + 2] = 0;\n    jimpImage.bitmap.data[idx + 3] = 0;\n  });\n}\n\nexport function getImageDataFromPixelImage(pixelImage) {\n  if (pixelImage === undefined) {\n    return new ImageData(1, 1);\n  }\n  const imageWidth = pixelImage.mode.width * pixelImage.mode.pixelWidth;\n  // const imageWidth = pixelImage.mode.width;\n  const imageData = new ImageData(imageWidth, pixelImage.mode.height);\n  for (let y = 0; y < pixelImage.mode.height; y++) {\n    for (let x = 0; x < pixelImage.mode.width; x++) {\n      const paletteIndex = pixelImage.peek(x, y);\n      const pixelValue = paletteIndex !== undefined ? Palettes.all.colodore.get(paletteIndex) : [0, 0, 0, 0];\n      for (let xx = 0; xx < pixelImage.mode.pixelWidth; xx++) {\n        const index = y * 4 * imageWidth + x * pixelImage.mode.pixelWidth * 4 + xx * 4;\n        imageData.data[index] = pixelValue[0];\n        imageData.data[index + 1] = pixelValue[1];\n        imageData.data[index + 2] = pixelValue[2];\n        imageData.data[index + 3] = 0xff;\n      }\n      // Pixels.poke(imageData.data, x, y, pixelValue);\n    }\n  }\n  return imageData;\n}\n\nexport function parseFilename(filename) {\n  const periodPos = filename.lastIndexOf('.');\n  const extension = filename.substring(periodPos + 1, filename.length);\n  const basename = filename.substring(0, Math.min(30, periodPos));\n  return { basename, extension };\n}\n\nexport function abbreviateFilename(filename, maxSize) {\n  if (filename.length <= maxSize) {\n    return filename;\n  }\n  const parsed = parseFilename(filename);\n\n  return `${parsed.basename.substring(0, maxSize)}...${parsed.extension}`;\n}\n\nexport default {\n  getImageDataFromJimpImage\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nfunction ProfileSelection(props) {\n  const { label, value, items, onChange } = props;\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <RadioGroup\n        row\n        aria-label={label}\n        name={`select${label}`}\n        value={value}\n        onChange={event => onChange(event.target.value)}\n      >\n        {items.map(i => (\n          <FormControlLabel value={i} control={<Radio />} label={i} />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nProfileSelection.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nProfileSelection.defaultProps = {\n  label: 'Choose'\n};\n\nexport default ProfileSelection;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Jimp from 'jimp';\nimport { Container } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport { abbreviateFilename, clearJimpImage, getImageDataFromJimpImage } from './Utilities';\nimport ProfileSelection from './ProfileSelection';\n\n// https://www.reddit.com/r/cemu/comments/aq2wbs/scale_filter_comparison_bilinear_vs_bicubic_vs/\n// Let user upload image, scale it, and call callback with a jimpimage\nfunction SourceImage(props) {\n  const { onChanged } = props;\n\n  const [uploadedImage, setUploadedImage] = useState(undefined);\n  const [image, setImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n  const [scale, setScale] = useState('fill');\n  const [filename, setFilename] = useState('input');\n\n  function onUploaded(newUploadedImage) {\n    setUploadedImage(newUploadedImage.jimpImage);\n    setFilename(newUploadedImage.filename);\n  }\n\n  function cropJimpImage(jimpImage) {\n    const isTooSmall = jimpImage.bitmap.width < 320 || jimpImage.bitmap.height < 200;\n    let blitImage;\n\n    // if the image is too small, the cropped image is cleared,\n    // and then the smaller image is blitted onto it\n    // this is a workaround for artifacts when cropping images to larger sizes\n    if (isTooSmall) {\n      blitImage = jimpImage.clone();\n    }\n    jimpImage.crop(0, 0, 320, 200);\n    if (blitImage !== undefined) {\n      clearJimpImage(jimpImage);\n      jimpImage.blit(blitImage, 0, 0);\n    }\n  }\n\n  useEffect(() => {\n    if (uploadedImage === undefined) {\n      return;\n    }\n\n    const newImage = uploadedImage.clone();\n    if (scale === 'fill') {\n      newImage.cover(320, 200, Jimp.RESIZE_HERMITE);\n    } else if (scale === 'fit') {\n      newImage.contain(320, 200, Jimp.RESIZE_HERMITE);\n    } else {\n      cropJimpImage(newImage);\n    }\n    setImage(newImage);\n  }, [uploadedImage, scale]);\n\n  useEffect(() => {\n    onChanged({ jimpImage: image, filename });\n    setImageData(getImageDataFromJimpImage(image));\n  }, [image, onChanged, filename]);\n\n  return (\n    <>\n      <h4>{abbreviateFilename(filename, 30)}</h4>\n      <Container>\n        <ImageUpload imageData={imageData} onload={onUploaded} />\n      </Container>\n      <Container align=\"left\">\n        <ProfileSelection\n          label=\"cropping\"\n          items={['crop', 'fill', 'fit']}\n          value={scale}\n          onChange={value => {\n            setScale(value);\n          }}\n        />\n      </Container>\n    </>\n  );\n}\n\nSourceImage.propTypes = {\n  onChanged: PropTypes.func.isRequired\n};\n\nexport default SourceImage;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Container, Grid, FormControlLabel, Checkbox, Slider, FormLabel } from '@material-ui/core';\nimport Brightness5OutlinedIcon from '@material-ui/icons/Brightness5Outlined';\nimport Brightness6OutlinedIcon from '@material-ui/icons/Brightness6Outlined';\nimport BrokenImageOutlinedIcon from '@material-ui/icons/BrokenImageOutlined';\nimport BlurOnOutlinedIcon from '@material-ui/icons/BlurOnOutlined';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport { getImageDataFromJimpImage } from './Utilities';\nimport Canvas from './Canvas';\n\nfunction ImagePreProcessor(props) {\n  const { jimpImage, onChanged } = props;\n\n  // defaults\n\n  const normalizeDefault = true;\n  const greyscaleDefault = false;\n  const mirrorHorDefault = false;\n  const mirrorVerDefault = false;\n  const invertDefault = false;\n  const brightnessDefault = 0;\n  const contrastDefault = 0;\n  const blurDefault = 0;\n  const thresholdDefault = 0;\n\n  const [image, setImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n  const [normalize, setNormalize] = useState(normalizeDefault);\n  const [greyscale, setGreyscale] = useState(greyscaleDefault);\n  const [mirrorHor, setMirrorHor] = useState(mirrorHorDefault);\n  const [mirrorVer, setMirrorVer] = useState(mirrorVerDefault);\n  const [invert, setInvert] = useState(invertDefault);\n  const [brightness, setBrightness] = useState(brightnessDefault);\n  const [contrast, setContrast] = useState(contrastDefault);\n  const [blur, setBlur] = useState(blurDefault);\n  const [threshold, setThreshold] = useState(thresholdDefault);\n  // const [saturation, setSaturation] = useState(0);\n\n  function reset() {\n    setNormalize(normalizeDefault);\n    setGreyscale(greyscaleDefault);\n    setMirrorHor(mirrorHorDefault);\n    setMirrorVer(mirrorVerDefault);\n    setInvert(invertDefault);\n    setBrightness(brightnessDefault);\n    setContrast(contrastDefault);\n    setBlur(blurDefault);\n    setThreshold(thresholdDefault);\n  }\n\n  useEffect(() => {\n    onChanged(image);\n    setImageData(getImageDataFromJimpImage(image));\n  }, [image, onChanged]);\n\n  useEffect(() => {\n    if (jimpImage === undefined) {\n      return;\n    }\n    const newImage = jimpImage.clone();\n\n    if (greyscale) {\n      newImage.greyscale();\n    }\n    if (normalize) {\n      newImage.normalize();\n    }\n\n    newImage.brightness(brightness);\n    newImage.contrast(contrast);\n\n    if (blur > 0) {\n      newImage.blur(blur);\n    }\n\n    newImage.mirror(mirrorHor, mirrorVer);\n\n    if (invert) {\n      newImage.invert();\n    }\n\n    if (threshold > 0) {\n      newImage.threshold({ max: threshold, autoGreyscale: false });\n    }\n\n    setImage(newImage);\n  }, [jimpImage, normalize, brightness, contrast, greyscale, blur, mirrorHor, mirrorVer, invert, threshold]);\n\n  const defaultsSet =\n    normalize === normalizeDefault &&\n    greyscale === greyscaleDefault &&\n    mirrorHor === mirrorHorDefault &&\n    mirrorVer === mirrorVerDefault &&\n    invert === invertDefault &&\n    contrast === contrastDefault &&\n    brightness === brightnessDefault &&\n    blur === blurDefault &&\n    threshold === thresholdDefault;\n\n  return (\n    <>\n      <h4>pre-processing</h4>\n      <Container>\n        <Canvas width={320} height={200} imageData={imageData} />\n      </Container>\n      <Container>\n        <Button variant=\"contained\" disabled={defaultsSet} onClick={() => reset()}>\n          <AutorenewIcon /> &nbsp; defaults\n        </Button>\n      </Container>\n\n      <Container align=\"left\">\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={normalize}\n              onChange={() => {\n                setNormalize(!normalize);\n              }}\n              name=\"normalizeCheckbox\"\n            />\n          }\n          label=\"normalize\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={greyscale}\n              onChange={() => {\n                setGreyscale(!greyscale);\n              }}\n              name=\"greyscaleCheckbox\"\n            />\n          }\n          label=\"greyscale\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={invert}\n              onChange={() => {\n                setInvert(!invert);\n              }}\n              name=\"invertCheckbox\"\n            />\n          }\n          label=\"invert\"\n        />\n      </Container>\n      <Container align=\"left\">\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={mirrorHor}\n              onChange={() => {\n                setMirrorHor(!mirrorHor);\n              }}\n              name=\"mirrorHorCheckbox\"\n            />\n          }\n          label=\"flip horizontal\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={mirrorVer}\n              onChange={() => {\n                setMirrorVer(!mirrorVer);\n              }}\n              name=\"mirrorVerCheckbox\"\n            />\n          }\n          label=\"flip vertical\"\n        />\n        <FormLabel component=\"legend\">brightness</FormLabel>\n        <Grid container>\n          <Grid item>\n            <Brightness5OutlinedIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              min={-1.0}\n              max={1.0}\n              step={0.05}\n              value={brightness}\n              onChange={(event, newValue) => setBrightness(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n        <FormLabel component=\"legend\">contrast</FormLabel>\n        <Grid container>\n          <Grid item>\n            <Brightness6OutlinedIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              min={-1.0}\n              max={1.0}\n              step={0.05}\n              value={contrast}\n              onChange={(event, newValue) => setContrast(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n        <FormLabel component=\"legend\">blur</FormLabel>\n        <Grid container>\n          <Grid item>\n            <BlurOnOutlinedIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              min={0}\n              max={10}\n              value={blur}\n              onChange={(event, newValue) => setBlur(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n        <FormLabel component=\"legend\">threshold</FormLabel>\n        <Grid container>\n          <Grid item>\n            <BrokenImageOutlinedIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              min={0}\n              max={255}\n              value={threshold}\n              onChange={(event, newValue) => setThreshold(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n      </Container>\n\n      {/* <Typography variant=\"h5\">color adjustments (slow)</Typography> */}\n      {/* <Typography gutterBottom>saturation</Typography> */}\n      {/* <Grid container> */}\n      {/*   <Grid item> */}\n      {/*     <FormatColorResetOutlinedIcon /> */}\n      {/*   </Grid> */}\n      {/*   <Grid item xs> */}\n      {/*     <Slider */}\n      {/*       min={-100} */}\n      {/*       max={100} */}\n      {/*       value={saturation} */}\n      {/*       onChange={(event, newValue) => setSaturation(newValue)} */}\n      {/*       valueLabelDisplay=\"on\" */}\n      {/*     /> */}\n      {/*   </Grid> */}\n      {/* </Grid> */}\n    </>\n  );\n}\n\nImagePreProcessor.propTypes = {\n  jimpImage: PropTypes.shape(),\n  onChanged: PropTypes.func.isRequired\n};\n\nImagePreProcessor.defaultProps = {\n  jimpImage: undefined\n};\n\nexport default ImagePreProcessor;\n","import React, { useEffect, useState } from 'react';\nimport { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\nimport PropTypes from 'prop-types';\nimport OrderedDither from 'retropixels-core/target/conversion/OrderedDither';\nimport { getImageDataFromPixelImage } from './Utilities';\nimport Canvas from './Canvas';\n\nfunction TargetImage(props) {\n  const graphicMode = GraphicModes.all.bitmap;\n\n  const { jimpImage, onChanged, hires, colorspaceId, paletteId, ditherId, ditherRadius } = props;\n\n  const defaultQuantizer = new Quantizer(Palettes.all[paletteId], ColorSpaces.all[colorspaceId]);\n  const defaultConverter = new Converter(defaultQuantizer);\n  const defaultDitherer = new OrderedDither(OrderedDither.presets[ditherId], ditherRadius);\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n\n  const [quantizer, setQuantizer] = useState(defaultQuantizer);\n  const [converter, setConverter] = useState(defaultConverter);\n  const [ditherer, setDitherer] = useState(defaultDitherer);\n\n  useEffect(() => {\n    setQuantizer(new Quantizer(Palettes.all[paletteId], ColorSpaces.all[colorspaceId]));\n  }, [colorspaceId, paletteId]);\n\n  useEffect(() => {\n    setConverter(new Converter(quantizer));\n  }, [quantizer]);\n\n  useEffect(() => {\n    setDitherer(new OrderedDither(OrderedDither.presets[ditherId], ditherRadius));\n  }, [ditherId, ditherRadius]);\n\n  useEffect(() => {\n    if (jimpImage !== undefined) {\n      const newPixelImage = graphicMode({ hires });\n      const resizedImage = jimpImage.clone();\n      resizedImage.resize(newPixelImage.mode.width, newPixelImage.mode.height);\n      if (ditherId !== 'none') {\n        ditherer.dither(resizedImage.bitmap);\n      }\n      // TODO: this is a workaround for a bug in dithering\n      // that clears the alpha channel\n      resizedImage.opaque();\n\n      converter.convert(resizedImage.bitmap, newPixelImage);\n      setPixelImage(newPixelImage);\n    }\n  }, [jimpImage, converter, ditherer, hires, graphicMode]);\n\n  useEffect(() => {\n    setImageData(getImageDataFromPixelImage(pixelImage));\n    onChanged(pixelImage);\n  }, [pixelImage, onChanged]);\n\n  return (\n    <>\n      <Canvas width={320} height={200} imageData={imageData} />\n    </>\n  );\n}\n\nTargetImage.propTypes = {\n  jimpImage: PropTypes.shape(),\n  onChanged: PropTypes.func,\n  hires: PropTypes.bool,\n  colorspaceId: PropTypes.string,\n  paletteId: PropTypes.string,\n  ditherId: PropTypes.string,\n  ditherRadius: PropTypes.number\n};\n\nTargetImage.defaultProps = {\n  jimpImage: undefined,\n  onChanged: () => {},\n  hires: false,\n  colorspaceId: 'xyz',\n  paletteId: 'colodore',\n  ditherId: 'bayer4x4',\n  ditherRadius: 32\n};\n\nexport default TargetImage;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Container, Grid, Slider, Checkbox, FormControlLabel, FormLabel } from '@material-ui/core';\nimport BlurLinearIcon from '@material-ui/icons/BlurLinear';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport { C64Writer } from 'retropixels-core';\nimport { saveAs } from 'file-saver';\nimport ProfileSelection from './ProfileSelection';\nimport TargetImage from './TargetImage';\nimport { parseFilename } from './Utilities';\n\n// wraps the Targetimage with controls for the various properties\nfunction Retropixels(props) {\n  const ditherOptions = ['none', 'bayer2x2', 'bayer4x4', 'bayer8x8'];\n  const colorspaceOptions = ['rgb', 'yuv', 'xyz', 'rainbow'];\n  const paletteOptions = ['colodore', 'pepto', 'deekay'];\n\n  // defaults\n\n  const ditherDefault = 'bayer4x4';\n  const paletteDefault = 'colodore';\n  const colorspaceDefault = 'xyz';\n  const hiresDefault = false;\n  const ditherRadiusDefault = 32;\n\n  const { jimpImage, filename } = props;\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [colorspace, setColorSpace] = useState(colorspaceDefault);\n  const [palette, setPalette] = useState(paletteDefault);\n  const [hires, setHires] = useState(hiresDefault);\n  const [dither, setDither] = useState(ditherDefault);\n  const [ditherRadius, setDitherRadius] = useState(ditherRadiusDefault);\n\n  let targetFilename = 'output';\n  if (pixelImage !== undefined) {\n    const extension = pixelImage.mode.pixelWidth === 1 ? '.art' : '.kla';\n    const parsedFilename = parseFilename(filename);\n    targetFilename = `${parsedFilename.basename.substring(0, 30)}${extension}`;\n  }\n\n  function onNewPixelImage(newPixelImage) {\n    setPixelImage(newPixelImage);\n  }\n\n  function reset() {\n    setColorSpace(colorspaceDefault);\n    setPalette(paletteDefault);\n    setHires(hiresDefault);\n    setDither(ditherDefault);\n    setDitherRadius(ditherRadiusDefault);\n  }\n\n  function saveOutput() {\n    const binary = C64Writer.toBinary(pixelImage);\n    const buffer = C64Writer.toBuffer(binary);\n    const blob = new Blob([buffer], { type: 'application/octet-stream' });\n    saveAs(blob, targetFilename);\n  }\n\n  // function savePNG() {\n  //   JimpPreprocessor.toJimpImage(pixelImage, Palettes.all[palette]).then(outputJimpImage => {\n  //     outputJimpImage.image\n  //       .getBufferAsync(Jimp.MIME_PNG)\n  //       .then(buffer => {\n  //         const blob = new Blob([buffer], { type: 'application/octet-stream' });\n  //         saveAs(blob, 'test.png');\n  //       })\n  //       .catch(error => alert(error));\n  //   });\n  // }\n\n  let outputFormat = 'output';\n  if (pixelImage !== undefined) {\n    outputFormat = pixelImage.mode.pixelWidth === 1 ? 'art studio file' : 'koala painter file';\n  }\n\n  const defaultsSet =\n    colorspace === colorspaceDefault &&\n    palette === paletteDefault &&\n    hires === hiresDefault &&\n    dither === ditherDefault &&\n    ditherRadius === ditherRadiusDefault;\n\n  return (\n    <>\n      <h4>{outputFormat}</h4>\n      <Container>\n        <TargetImage\n          jimpImage={jimpImage}\n          onChanged={onNewPixelImage}\n          hires={hires}\n          colorspaceId={colorspace}\n          paletteId={palette}\n          ditherId={dither}\n          ditherRadius={ditherRadius}\n        />\n      </Container>\n      <Container>\n        <Grid container>\n          <Grid item xs>\n            <Button variant=\"contained\" disabled={defaultsSet} onClick={() => reset()}>\n              <AutorenewIcon /> &nbsp; defaults\n            </Button>\n          </Grid>\n          <Grid item xs>\n            <Button\n              variant=\"contained\"\n              disabled={pixelImage === undefined}\n              color=\"primary\"\n              onClick={() => saveOutput()}\n            >\n              <CloudDownloadIcon /> &nbsp; Download\n            </Button>\n          </Grid>\n        </Grid>\n      </Container>\n      <Container align=\"left\">\n        {/* TODO: use generic checkbox */}\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={hires}\n              onChange={() => {\n                setHires(!hires);\n              }}\n              name=\"mirrorHorCheckbox\"\n            />\n          }\n          label=\"hires\"\n        />\n      </Container>\n      <Container align=\"left\">\n        <ProfileSelection\n          label=\"colorspace\"\n          value={colorspace}\n          items={colorspaceOptions}\n          onChange={value => setColorSpace(value)}\n        />\n        <ProfileSelection\n          label=\"palette\"\n          value={palette}\n          items={paletteOptions}\n          onChange={value => setPalette(value)}\n        />\n        <ProfileSelection label=\"dithering\" value={dither} items={ditherOptions} onChange={value => setDither(value)} />\n        <FormLabel component=\"legend\">dithering strength</FormLabel>\n        <Grid container>\n          <Grid item>\n            <BlurLinearIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              disabled={dither === 'none'}\n              min={0}\n              max={64}\n              value={ditherRadius}\n              onChange={(event, newValue) => setDitherRadius(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nRetropixels.propTypes = {\n  jimpImage: PropTypes.shape(),\n  filename: PropTypes.string\n};\n\nRetropixels.defaultProps = {\n  jimpImage: undefined,\n  filename: 'output'\n};\n\nexport default Retropixels;\n","export default __webpack_public_path__ + \"static/media/logo.42e2fcaf.svg\";","export default {buildnr: '2021-05-25.cfdfa1d', url: 'https://github.com/micheldebree/retropixels/commit/cfdfa1d4a0213e38daf1616bce7b91ab8a41d658'}\n","import React, { useState } from 'react';\nimport { Grid, AppBar, Toolbar, Typography, Button, Link } from '@material-ui/core';\nimport './App.css';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SourceImage from './SourceImage';\nimport ImagePreProcessor from './ImagePreProcessor';\nimport Retropixels from './Retropixels';\nimport Logo from './logo.svg';\nimport AppVersion from './version';\n\n// https://github.com/harishmahamure/photoCompress\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nfunction App() {\n  const [sourceImage, setSourceImage] = useState(undefined);\n  const [processedImage, setProcessedImage] = useState(undefined);\n  const [filename, setFilename] = useState(undefined);\n\n  const classes = useStyles();\n\n  function onSourceImageChanged(newSourceImage) {\n    setSourceImage(newSourceImage.jimpImage);\n    setFilename(newSourceImage.filename);\n  }\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">Retropixels</header> */}\n      <body className=\"App-body\">\n        <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n              <img src={Logo} alt=\"Logo\" className=\"logo\" />\n              <Typography variant=\"h6\" className={classes.title} align=\"left\">\n                Retropixels\n              </Typography>\n              <Link href={AppVersion.url} color=\"inherit\" variant=\"body2\">\n                v{AppVersion.buildnr}\n              </Link>\n              <Button color=\"inherit\" href=\"https://github.com/micheldebree/retropixels\">\n                <GitHubIcon />\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <SourceImage onChanged={onSourceImageChanged} />\n          </Grid>\n          <Grid item xs>\n            <ImagePreProcessor jimpImage={sourceImage} onChanged={jimpImage => setProcessedImage(jimpImage)} />\n          </Grid>\n          <Grid item xs>\n            <Retropixels jimpImage={processedImage} filename={filename} />\n          </Grid>\n        </Grid>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}